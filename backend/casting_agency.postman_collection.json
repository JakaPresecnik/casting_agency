{
	"info": {
		"_postman_id": "f0c2bcd4-67d9-4478-a20b-856311115a8e",
		"name": "casting_agency",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Executive Producer",
			"item": [
				{
					"name": "/movies fill DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Postman Testing\",\r\n    \"release_date\": \"2021-06-16\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/movies"
					},
					"response": []
				},
				{
					"name": "/actors fill DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr. Postman Test\",\r\n    \"age\": 1,\r\n    \"gender\": \"postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/actors"
					},
					"response": []
				},
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains actors array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors).to.be.an('array')\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/actors"
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains movies array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies).to.be.an('array')\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/movies"
					},
					"response": []
				},
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr. Postman Test Jr.\",\r\n    \"age\": 1,\r\n    \"gender\": \"postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/actors"
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Postman Testing\",\r\n    \"release_date\": \"2021-06-16\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/movies"
					},
					"response": []
				},
				{
					"name": "/actors/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Patched Postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/actors/2"
					},
					"response": []
				},
				{
					"name": "/movies/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Patched Title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/movies/2"
					},
					"response": []
				},
				{
					"name": "/actors/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{host}}/actors/2"
					},
					"response": []
				},
				{
					"name": "/movies/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{host}}/movies/2"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkZrSzl5dTNpM09SNlRkSzdwR0NobCJ9.eyJpc3MiOiJodHRwczovL2Rldi1iZm4tOHIxdC5ldS5hdXRoMC5jb20vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMDg0ODA5MDY1Mzk5NzAxMTUzNTUiLCJhdWQiOlsiY2FzdGluZ19hZ2VuY3kiLCJodHRwczovL2Rldi1iZm4tOHIxdC5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjI0Mjc2ODgwLCJleHAiOjE2MjQzNjMyODAsImF6cCI6IjV0SERzRkJtazFCQ1VydlN2SlM0REFtSFlMb3ljaDFFIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInBlcm1pc3Npb25zIjpbImRlbGV0ZTphY3RvcnMiLCJkZWxldGU6bW92aWVzIiwiZ2V0OmFjdG9ycyIsImdldDptb3ZpZXMiLCJwYXRjaDphY3RvcnMiLCJwYXRjaDptb3ZpZXMiLCJwb3N0OmFjdG9ycyIsInBvc3Q6bW92aWVzIl19.j7UknjFrZ9Jp6nn16bWkPqCdBEFi7y0NpYbEBWGR8Crt1-2-KE6gvWPzlltlxwcXTwpESgdgEXtVvPQ6Ftr7Y1AWiuSY_XR7hw9o8m8OQYdxwOrUkx1d9JCzAIloOLKYEACn8aDpjoIuVQQqAB8qUlYXhH9lq_Nl2e58mRL95VDp17CMB2-UVmvWpjfrY8S52UwKpcIjcrCLTulIV1Qvq74H89rkFgoXkCV4x-AXROZtUlAq4kczEvj15d6e64Iq0eYGaNq7Yd9ep7qH3yXWyWoYDz6f4UdYVMmte-hi6_qTCw-rYqqwiXTTOx6vE2n__nVzSQrqoZFMsX3XB_4Wbw"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Casting Director",
			"item": [
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains actors array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors).to.be.an('array')\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/actors"
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains movies array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies).to.be.an('array')\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/movies"
					},
					"response": []
				},
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr. Postman Test Jr.\",\r\n    \"age\": 1,\r\n    \"gender\": \"postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/actors"
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Postman Testing\",\r\n    \"release_date\": \"2021-06-16\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/movies"
					},
					"response": []
				},
				{
					"name": "/actors/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Patched Postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/actors/1"
					},
					"response": []
				},
				{
					"name": "/movies/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Patched Title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/movies/1"
					},
					"response": []
				},
				{
					"name": "/actors/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{host}}/actors/1"
					},
					"response": []
				},
				{
					"name": "/movies/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{host}}/movies/1"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkZrSzl5dTNpM09SNlRkSzdwR0NobCJ9.eyJpc3MiOiJodHRwczovL2Rldi1iZm4tOHIxdC5ldS5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NjBhMjNjMmUxNGIzOWEwMDZhYTI1YmU1IiwiYXVkIjpbImNhc3RpbmdfYWdlbmN5IiwiaHR0cHM6Ly9kZXYtYmZuLThyMXQuZXUuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTYyNDI3NzE1NywiZXhwIjoxNjI0MzYzNTU3LCJhenAiOiI1dEhEc0ZCbWsxQkNVcnZTdkpTNERBbUhZTG95Y2gxRSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZ2V0OmFjdG9ycyIsImdldDptb3ZpZXMiLCJwYXRjaDphY3RvcnMiLCJwYXRjaDptb3ZpZXMiLCJwb3N0OmFjdG9ycyJdfQ.GQ-Uj4SPWjyaTFuD86EoAvloBLQExwBMxcRVZTwQDO5NmIeEGzc084MdvuZsyB2fhlF0oafse01tzqpIaD3k_QBPYDKpMy8-zgE7tJzC1pY1g2Kpqfjd96YaXhRi4_8RiWjzk4M7sG8V9yEB-Jypk-wSbISVeU0Qu1yAfvO3wHET76C1BTfuN6Vii6fWdTePO2led0LbTpuyKioE_NPJ4cIGQsMZzrpvnNGSK08phOwYrqJj7u8hJrCW3jhVVRdfcP03aArc-X2Z7q1kf91MQhKZ12ZGEtbDbAZvJftH5j7NZe_kn6nIjIeYpB-LHloLW1zO8WJ38r7mt38ZtsWCdg"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Casting Assistant",
			"item": [
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains actors array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.actors).to.be.an('array')\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/actors"
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains movies array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.movies).to.be.an('array')\r",
									"});\r",
									"\r",
									"pm.test(\"value success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/movies"
					},
					"response": []
				},
				{
					"name": "/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr. Postman Test\",\r\n    \"age\": 1,\r\n    \"gender\": \"postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/actors"
					},
					"response": []
				},
				{
					"name": "/movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Postman Testing\",\r\n    \"release_date\": \"2021-06-16\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/movies"
					},
					"response": []
				},
				{
					"name": "/actors/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Patched Postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/actors/3"
					},
					"response": []
				},
				{
					"name": "/movies/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Patched Title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/movies/3"
					},
					"response": []
				},
				{
					"name": "/actors/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{host}}/actors/3"
					},
					"response": []
				},
				{
					"name": "/movies/3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{host}}/movies/3"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkZrSzl5dTNpM09SNlRkSzdwR0NobCJ9.eyJpc3MiOiJodHRwczovL2Rldi1iZm4tOHIxdC5ldS5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NWY0ZTZiY2QwZjcyYjQwMDY3YjNjM2U2IiwiYXVkIjpbImNhc3RpbmdfYWdlbmN5IiwiaHR0cHM6Ly9kZXYtYmZuLThyMXQuZXUuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTYyNDI3NzIwNywiZXhwIjoxNjI0MzYzNjA3LCJhenAiOiI1dEhEc0ZCbWsxQkNVcnZTdkpTNERBbUhZTG95Y2gxRSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJwZXJtaXNzaW9ucyI6WyJnZXQ6YWN0b3JzIiwiZ2V0Om1vdmllcyJdfQ.M7At2kmvIUF2RWaOcQoD3ADAOy4BhPLQOWmars8XYP4OAOvYOblcrIHaEiSKUjMDIFTdR9_nabKKbNpOyDMBX4OBquxLoItBmc8kR1gr3YA0Bp5g_qy2IUhdn7DhKklIvLKa3iUR9Qp8hNb0zpY_Qcz6hgsJWJyL1m6fBc7JANuV73gCrQxGR_DQYfejkFECNWfJM1zTW4-QayP9MTNmMrYMADZsxkyKZ1HbKNsO1NMhWitdjMd6yaPGNQfQH-hmLnZMkDAxN4TgHt2Ssl5ljJvhkgyxMbZgmZZZLHj7KUltdEA4thRP1bM9pFdVX_oQU1SnV2Mqk2tvAPHXecww9A"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:5000"
		}
	]
}